
Alarm Clock.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000850  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ff  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d7  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  00001b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	5c 00       	.word	0x005c	; ????
  6a:	60 00       	.word	0x0060	; ????
  6c:	64 00       	.word	0x0064	; ????
  6e:	68 00       	.word	0x0068	; ????
  70:	6c 00       	.word	0x006c	; ????
  72:	70 00       	.word	0x0070	; ????
  74:	74 00       	.word	0x0074	; ????
  76:	78 00       	.word	0x0078	; ????
  78:	7c 00       	.word	0x007c	; ????
  7a:	80 00       	.word	0x0080	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 30       	cpi	r26, 0x03	; 3
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <DigitTo7SegEncoder>:

unsigned char DigitTo7SegEncoder(unsigned char digit, unsigned char common)
{
	unsigned char SegVal;
	
	switch(digit)
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	91 05       	cpc	r25, r1
  aa:	08 f0       	brcs	.+2      	; 0xae <DigitTo7SegEncoder+0xa>
  ac:	40 c0       	rjmp	.+128    	; 0x12e <DigitTo7SegEncoder+0x8a>
  ae:	fc 01       	movw	r30, r24
  b0:	ec 5c       	subi	r30, 0xCC	; 204
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__tablejump2__>
	{
		case 0:    if(common == 1)    SegVal = 0b00111111;
  b8:	61 30       	cpi	r22, 0x01	; 1
  ba:	31 f5       	brne	.+76     	; 0x108 <DigitTo7SegEncoder+0x64>
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	37 c0       	rjmp	.+110    	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b00111111;
		break;
		case 1:    if(common == 1)    SegVal = 0b00000110;
  c0:	61 30       	cpi	r22, 0x01	; 1
  c2:	21 f5       	brne	.+72     	; 0x10c <DigitTo7SegEncoder+0x68>
  c4:	26 e0       	ldi	r18, 0x06	; 6
  c6:	33 c0       	rjmp	.+102    	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b00000110;
		break;
		case 2:    if(common == 1)    SegVal = 0b01011011;
  c8:	61 30       	cpi	r22, 0x01	; 1
  ca:	11 f5       	brne	.+68     	; 0x110 <DigitTo7SegEncoder+0x6c>
  cc:	2b e5       	ldi	r18, 0x5B	; 91
  ce:	2f c0       	rjmp	.+94     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b01011011;
		break;
		case 3:    if(common == 1)    SegVal = 0b01001111;
  d0:	61 30       	cpi	r22, 0x01	; 1
  d2:	01 f5       	brne	.+64     	; 0x114 <DigitTo7SegEncoder+0x70>
  d4:	2f e4       	ldi	r18, 0x4F	; 79
  d6:	2b c0       	rjmp	.+86     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b01001111;
		break;
		case 4:    if(common == 1)    SegVal = 0b01100110;
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	f1 f4       	brne	.+60     	; 0x118 <DigitTo7SegEncoder+0x74>
  dc:	26 e6       	ldi	r18, 0x66	; 102
  de:	27 c0       	rjmp	.+78     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b01100110;
		break;
		case 5:    if(common == 1)    SegVal = 0b01101101;
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	e1 f4       	brne	.+56     	; 0x11c <DigitTo7SegEncoder+0x78>
  e4:	2d e6       	ldi	r18, 0x6D	; 109
  e6:	23 c0       	rjmp	.+70     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b01101101;
		break;
		case 6:    if(common == 1)    SegVal = 0b01111101;
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	d1 f4       	brne	.+52     	; 0x120 <DigitTo7SegEncoder+0x7c>
  ec:	2d e7       	ldi	r18, 0x7D	; 125
  ee:	1f c0       	rjmp	.+62     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b01111101;
		break;
		case 7:    if(common == 1)    SegVal = 0b00000111;
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	c1 f4       	brne	.+48     	; 0x124 <DigitTo7SegEncoder+0x80>
  f4:	27 e0       	ldi	r18, 0x07	; 7
  f6:	1b c0       	rjmp	.+54     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b00000111;
		break;
		case 8:    if(common == 1)    SegVal = 0b01111111;
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	b1 f4       	brne	.+44     	; 0x128 <DigitTo7SegEncoder+0x84>
  fc:	2f e7       	ldi	r18, 0x7F	; 127
  fe:	17 c0       	rjmp	.+46     	; 0x12e <DigitTo7SegEncoder+0x8a>
		else            SegVal = ~0b01111111;
		break;
		case 9:    if(common == 1)    SegVal = 0b01101111;
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	a1 f4       	brne	.+40     	; 0x12c <DigitTo7SegEncoder+0x88>
 104:	2f e6       	ldi	r18, 0x6F	; 111
 106:	13 c0       	rjmp	.+38     	; 0x12e <DigitTo7SegEncoder+0x8a>
	unsigned char SegVal;
	
	switch(digit)
	{
		case 0:    if(common == 1)    SegVal = 0b00111111;
		else            SegVal = ~0b00111111;
 108:	20 ec       	ldi	r18, 0xC0	; 192
 10a:	11 c0       	rjmp	.+34     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 1:    if(common == 1)    SegVal = 0b00000110;
		else            SegVal = ~0b00000110;
 10c:	29 ef       	ldi	r18, 0xF9	; 249
 10e:	0f c0       	rjmp	.+30     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 2:    if(common == 1)    SegVal = 0b01011011;
		else            SegVal = ~0b01011011;
 110:	24 ea       	ldi	r18, 0xA4	; 164
 112:	0d c0       	rjmp	.+26     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 3:    if(common == 1)    SegVal = 0b01001111;
		else            SegVal = ~0b01001111;
 114:	20 eb       	ldi	r18, 0xB0	; 176
 116:	0b c0       	rjmp	.+22     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 4:    if(common == 1)    SegVal = 0b01100110;
		else            SegVal = ~0b01100110;
 118:	29 e9       	ldi	r18, 0x99	; 153
 11a:	09 c0       	rjmp	.+18     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 5:    if(common == 1)    SegVal = 0b01101101;
		else            SegVal = ~0b01101101;
 11c:	22 e9       	ldi	r18, 0x92	; 146
 11e:	07 c0       	rjmp	.+14     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 6:    if(common == 1)    SegVal = 0b01111101;
		else            SegVal = ~0b01111101;
 120:	22 e8       	ldi	r18, 0x82	; 130
 122:	05 c0       	rjmp	.+10     	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 7:    if(common == 1)    SegVal = 0b00000111;
		else            SegVal = ~0b00000111;
 124:	28 ef       	ldi	r18, 0xF8	; 248
 126:	03 c0       	rjmp	.+6      	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 8:    if(common == 1)    SegVal = 0b01111111;
		else            SegVal = ~0b01111111;
 128:	20 e8       	ldi	r18, 0x80	; 128
 12a:	01 c0       	rjmp	.+2      	; 0x12e <DigitTo7SegEncoder+0x8a>
		break;
		case 9:    if(common == 1)    SegVal = 0b01101111;
		else            SegVal = ~0b01101111;
 12c:	20 e9       	ldi	r18, 0x90	; 144
	}
	return SegVal;
}
 12e:	82 2f       	mov	r24, r18
 130:	08 95       	ret

00000132 <main>:
unsigned char DigitTo7SegEncoder(unsigned char digit, unsigned char common);


int main(void)
{
	DDRB = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x3F;
 136:	9f e3       	ldi	r25, 0x3F	; 63
 138:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xFF;
 13a:	88 b9       	out	0x08, r24	; 8
	
	TCCR1B = (1<<CS12|1<<WGM12);
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 15625-1;
 142:	88 e0       	ldi	r24, 0x08	; 8
 144:	9d e3       	ldi	r25, 0x3D	; 61
 146:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK0 = 1<<OCIE1A;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
 154:	78 94       	sei
	
	
	while(1)
	{
		/* Set Minutes when PORTC Pin 6 Switch is Pressed*/
		if((PINC & 0x40) == 0 )
 156:	36 99       	sbic	0x06, 6	; 6
 158:	15 c0       	rjmp	.+42     	; 0x184 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	80 e7       	ldi	r24, 0x70	; 112
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x2e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x38>
 16a:	00 00       	nop
		{
			_delay_ms(200);
			if(minutes < 59)
 16c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutes>
 170:	8b 33       	cpi	r24, 0x3B	; 59
 172:	30 f4       	brcc	.+12     	; 0x180 <main+0x4e>
			minutes++;
 174:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutes>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <minutes>
 17e:	02 c0       	rjmp	.+4      	; 0x184 <main+0x52>
			else
			minutes = 0;
 180:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <minutes>
		}
		/* Set Hours when PORTC Pin 7 Switch is Pressed*/
		if((PINC & 0x80) == 0 )
 184:	37 99       	sbic	0x06, 7	; 6
 186:	15 c0       	rjmp	.+42     	; 0x1b2 <main+0x80>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	80 e7       	ldi	r24, 0x70	; 112
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x5c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x66>
 198:	00 00       	nop
		{
			_delay_ms(200);
			if(hours < 23)
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hours>
 19e:	87 31       	cpi	r24, 0x17	; 23
 1a0:	30 f4       	brcc	.+12     	; 0x1ae <main+0x7c>
			hours++;
 1a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hours>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hours>
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <main+0x80>
			else
			hours = 0;
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <hours>
		}
		
		PORTB = DigitTo7SegEncoder(seconds%10,1);
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	cd ec       	ldi	r28, 0xCD	; 205
 1b8:	8c 9f       	mul	r24, r28
 1ba:	91 2d       	mov	r25, r1
 1bc:	11 24       	eor	r1, r1
 1be:	96 95       	lsr	r25
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	99 0f       	add	r25, r25
 1c6:	29 2f       	mov	r18, r25
 1c8:	22 0f       	add	r18, r18
 1ca:	22 0f       	add	r18, r18
 1cc:	92 0f       	add	r25, r18
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	89 1b       	sub	r24, r25
 1d2:	0e 94 52 00 	call	0xa4	; 0xa4 <DigitTo7SegEncoder>
 1d6:	85 b9       	out	0x05, r24	; 5
		PORTC = ~0x01;
 1d8:	8e ef       	ldi	r24, 0xFE	; 254
 1da:	88 b9       	out	0x08, r24	; 8
		PORTB = DigitTo7SegEncoder(seconds/10,1);
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e0:	8c 9f       	mul	r24, r28
 1e2:	81 2d       	mov	r24, r1
 1e4:	11 24       	eor	r1, r1
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	86 95       	lsr	r24
 1ea:	86 95       	lsr	r24
 1ec:	86 95       	lsr	r24
 1ee:	0e 94 52 00 	call	0xa4	; 0xa4 <DigitTo7SegEncoder>
 1f2:	85 b9       	out	0x05, r24	; 5
		PORTC = ~0x02;
 1f4:	8d ef       	ldi	r24, 0xFD	; 253
 1f6:	88 b9       	out	0x08, r24	; 8
		PORTB = DigitTo7SegEncoder(minutes%10,1);
 1f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutes>
 1fc:	8c 9f       	mul	r24, r28
 1fe:	91 2d       	mov	r25, r1
 200:	11 24       	eor	r1, r1
 202:	96 95       	lsr	r25
 204:	96 95       	lsr	r25
 206:	96 95       	lsr	r25
 208:	99 0f       	add	r25, r25
 20a:	29 2f       	mov	r18, r25
 20c:	22 0f       	add	r18, r18
 20e:	22 0f       	add	r18, r18
 210:	92 0f       	add	r25, r18
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	89 1b       	sub	r24, r25
 216:	0e 94 52 00 	call	0xa4	; 0xa4 <DigitTo7SegEncoder>
 21a:	85 b9       	out	0x05, r24	; 5
		PORTC = ~0x04;
 21c:	8b ef       	ldi	r24, 0xFB	; 251
 21e:	88 b9       	out	0x08, r24	; 8
		PORTB = DigitTo7SegEncoder(minutes/10,1);
 220:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutes>
 224:	8c 9f       	mul	r24, r28
 226:	81 2d       	mov	r24, r1
 228:	11 24       	eor	r1, r1
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	86 95       	lsr	r24
 232:	0e 94 52 00 	call	0xa4	; 0xa4 <DigitTo7SegEncoder>
 236:	85 b9       	out	0x05, r24	; 5
		PORTC = ~0x08;
 238:	87 ef       	ldi	r24, 0xF7	; 247
 23a:	88 b9       	out	0x08, r24	; 8
		PORTB = DigitTo7SegEncoder(hours%10,1);
 23c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hours>
 240:	8c 9f       	mul	r24, r28
 242:	91 2d       	mov	r25, r1
 244:	11 24       	eor	r1, r1
 246:	96 95       	lsr	r25
 248:	96 95       	lsr	r25
 24a:	96 95       	lsr	r25
 24c:	99 0f       	add	r25, r25
 24e:	29 2f       	mov	r18, r25
 250:	22 0f       	add	r18, r18
 252:	22 0f       	add	r18, r18
 254:	92 0f       	add	r25, r18
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	89 1b       	sub	r24, r25
 25a:	0e 94 52 00 	call	0xa4	; 0xa4 <DigitTo7SegEncoder>
 25e:	85 b9       	out	0x05, r24	; 5
		PORTC = ~0x10;
 260:	8f ee       	ldi	r24, 0xEF	; 239
 262:	88 b9       	out	0x08, r24	; 8
		PORTB = DigitTo7SegEncoder(hours/10,1);
 264:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hours>
 268:	8c 9f       	mul	r24, r28
 26a:	81 2d       	mov	r24, r1
 26c:	11 24       	eor	r1, r1
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	86 95       	lsr	r24
 272:	86 95       	lsr	r24
 274:	86 95       	lsr	r24
 276:	0e 94 52 00 	call	0xa4	; 0xa4 <DigitTo7SegEncoder>
 27a:	85 b9       	out	0x05, r24	; 5
		PORTC = ~0x20;
 27c:	8f ed       	ldi	r24, 0xDF	; 223
 27e:	88 b9       	out	0x08, r24	; 8
		
	}
 280:	6a cf       	rjmp	.-300    	; 0x156 <main+0x24>

00000282 <__vector_11>:
	return SegVal;
}


ISR(TIMER1_COMPA_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
	seconds++;
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(seconds == 60)
 298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29c:	8c 33       	cpi	r24, 0x3C	; 60
 29e:	39 f4       	brne	.+14     	; 0x2ae <__vector_11+0x2c>
	{
		seconds = 0;
 2a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		minutes++;
 2a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutes>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <minutes>
	}
	if(minutes == 60)
 2ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutes>
 2b2:	8c 33       	cpi	r24, 0x3C	; 60
 2b4:	39 f4       	brne	.+14     	; 0x2c4 <__vector_11+0x42>
	{
		minutes = 0;
 2b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <minutes>
		hours++;
 2ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hours>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hours>
	}
	if(hours > 23)
 2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hours>
 2c8:	88 31       	cpi	r24, 0x18	; 24
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__vector_11+0x4e>
	hours = 0;
 2cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <hours>
 2d0:	8f 91       	pop	r24
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__tablejump2__>:
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	05 90       	lpm	r0, Z+
 2e2:	f4 91       	lpm	r31, Z
 2e4:	e0 2d       	mov	r30, r0
 2e6:	09 94       	ijmp

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
